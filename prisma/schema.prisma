// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String
  passwordHash String  @map("password_hash")
  avatarUrl   String?  @map("avatar_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  ideas              Idea[]
  downloads          Download[]
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model Idea {
  id           Int      @id @default(autoincrement())
  title        String
  description  String   @db.Text
  category     String   @db.VarChar(100)
  status       String   @default("pending") @db.VarChar(50)
  tags         String[] @default([])
  userId       Int?     @map("user_id")
  contactEmail String?  @map("contact_email")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("ideas")
}

model Download {
  id        Int      @id @default(autoincrement())
  platform  String   @db.VarChar(50)
  version   String   @db.VarChar(50)
  userAgent String?  @map("user_agent") @db.Text
  ipAddress String?  @map("ip_address") @db.Inet
  userId    Int?     @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("downloads")
}

model SoftwareVersion {
  id           Int      @id @default(autoincrement())
  version      String   @db.VarChar(50)
  platform     String   @db.VarChar(50)
  downloadUrl  String   @map("download_url") @db.VarChar(500)
  fileSize     BigInt   @map("file_size")
  checksum     String   @db.VarChar(255)
  releaseNotes String?  @map("release_notes") @db.Text
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("software_versions")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}